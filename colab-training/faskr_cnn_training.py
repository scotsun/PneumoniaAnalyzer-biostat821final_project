# -*- coding: utf-8 -*-
"""faskr-cnn training.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_ws7oT_VnSvC2lM_finxLjo7j-4ealKu
"""

from google.colab import drive
drive.mount("/content/drive", force_remount=True)

import torch

torch.cuda.is_available()

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip install detecto

import os
wd_path = "/content/drive/MyDrive/kaggle/pneumonia/"
os.chdir(wd_path)

from detecto import core, utils, visualize
from torchvision import transforms
import matplotlib.pyplot as plt

transform_img = transforms.Compose([
    transforms.ToPILImage(),
    transforms.Resize(800),
    transforms.RandomHorizontalFlip(0.5),
    transforms.ToTensor(),
    utils.normalize_transform(),
])

dataset = core.Dataset(label_data="annotation_train.csv", image_folder="images/", transform=transform_img)
image, target = dataset[5]

visualize.show_labeled_image(image, target['boxes'], target['labels'])

# Create our validation dataset
val_dataset = core.Dataset('annotation_val.csv', 'images/')

# Create the loader for our training dataset
loader = core.DataLoader(dataset, batch_size=10, shuffle=True)
model = core.Model(['pneumonia'], pretrained=False)
losses = model.fit(loader, val_dataset, epochs=50, verbose=True)

# Plot the accuracy over time
plt.plot(losses)
plt.show()

model.save("weights_v2.pth")

images = []
# Create a list of images 0, 5, 10, ... 40 from val_dataset
for i in range(0, 45, 5):
    image, _ = val_dataset[i]
    images.append(image)

# Plot a 3x3 grid of the model's predictions on our 9 images
visualize.plot_prediction_grid(model, images, dim=(3, 3), figsize=(16, 12))

image = utils.read_image('./images/d47f354b-d29d-48b9-9c54-07c1e981bef4.jpg')
threshold = 0.4
_, _boxes, _scores = model.predict(image)
# select by threshold
boxes = _boxes[_scores > threshold]
scores = _scores[_scores > threshold]
conf = list(scores.numpy().round(2).astype("str"))
conf = ["conf:" + elem for elem in conf]
visualize.show_labeled_image(image, boxes, conf)